import os
import hashlib




def init():
    os.makedirs('.myvcs', exist_ok=True)
    with open('.myvcs/HEAD', 'w') as f:
        f.write('master')
    os.makedirs('.myvcs/refs/heads', exist_ok=True)
    with open('.myvcs/refs/heads/master', 'w') as f:
        f.write('')
    os.makedirs('.myvcs/objects', exist_ok=True)



# a staging area and function to add files

def hash_object(data):
    sha1 = hashlib.sha1()
    sha1.update(data)
    return sha1.hexdigest()

def add(file_path):
    with open(file_path, 'rb') as f:
        data = f.read()
    oid = hash_object(data)
    with open(f'.myvcs/objects/{oid}', 'wb') as f:
        f.write(data)
    with open('.myvcs/index', 'a') as f:
        f.write(f'{oid} {file_path}\n')    






# a commit function to save change

def commit(message):
    with open('.myvcs/index', 'r') as f:
        files = f.read()
    parent = open('.myvcs/refs/heads/master').read().strip()
    commit_data = f'tree {files}\nparent {parent}\nmessage {message}\n'
    oid = hash_object(commit_data.encode())
    with open(f'.myvcs/objects/{oid}', 'wb') as f:
        f.write(commit_data.encode())
    with open('.myvcs/refs/heads/master', 'w') as f:
        f.write(oid)
    os.remove('.myvcs/index')        





# a function to view commit history

def log():
    oid = open('.myvcs/refs/heads/master').read().strip()
    while oid:
        with open(f'.myvcs/objects/{oid}', 'r') as f:
            data = f.read().splitlines()
        print(f'commit {oid}')
        for line in data:
            if line.startswith('parent '):
                oid = line[len('parent '):]
                break
        else:
            oid = None    



# functions for branching and merging


def branch(name):
    oid = open('.myvcs/refs/heads/master').read().strip()
    with open(f'.myvcs/refs/heads/{name}', 'w') as f:
        f.write(oid)

def merge(branch):
    with open(f'.myvcs/refs/heads/{branch}', 'r') as f:
        branch_oid = f.read().strip()
    with open('.myvcs/refs/heads/master', 'r') as f:
        master_oid = f.read().strip()
    merge_commit = f'tree (merged data)\nparents {master_oid} {branch_oid}\n'
    oid = hash_object(merge_commit.encode())
    with open(f'.myvcs/objects/{oid}', 'wb') as f:
        f.write(merge_commit.encode())
    with open('.myvcs/refs/heads/master', 'w') as f:
        f.write(oid)            



# a function to clone the repository

import shutil

def clone(repo_path, clone_path):
    shutil.copytree(repo_path, clone_path)        